@inject ISessionStorageService _sessionStorage;
@inject AuthenticationStateProvider _authStateProvider

@page "/report-problem"
@using MeetNSeat.Client.Services
@using MeetNSeat.Client.Models
@using Blazored.SessionStorage
@using System.IO
@attribute [Authorize]

<main role="main" class="col-md-12 ml-sm-auto col-lg-12 px-4">
    <h2 class="pt-3 pb-2 mb-3 border-bottom">Report problem</h2>
    <div>
        <form>
            <div class="mb-3">
                <label class="form-label h4">Problem</label>
                <input class="form-control mb-2" type="text" style="max-width: 36%" @bind="Title" placeholder="Enter a title here ..." @bind:event="oninput" maxlength="50">
                <span style="position: absolute; left: 32.5%; margin-top: -28px">@Title.Length / 50</span>
                <textarea class="form-control" style="min-height: 40px" rows="8" placeholder="Enter your problem here ..." role="textbox" @bind="Description" @bind:event="oninput" maxlength="1000"></textarea>
                <span style="position: absolute; right: 36px; margin-top: -24px">@Description.Length / 1000</span>
            </div>
            <div class="mb-3 p-2" style="display: grid; grid-template-columns: auto auto; border: thin solid #ced4da; border-radius: 4px;">
                <div class="mr-5">
                    <label class="form-label">Location</label>
                    <select class="form-control" @onchange="GetRoomsAtLocation" aria-label="Default select example">
                        <option>Select a location</option>
                        @if (Locations.Any())
                        {
                            @foreach (var location in Locations)
                            {
                                <option value="@location.Id">@location.Name, @location.City</option>
                            }
                        }
                    </select>
                    <br/>
                    <InputFile OnChange="@SingleUpload"/>
                </div>
                <div>
                    <label class="form-label">Room</label>
                    <select class="form-control" @bind="RoomId" @bind:event="oninput" aria-label="Default select example">
                        <option>Select a room</option>
                        @if (Rooms.Any())
                        {
                            @foreach (var room in Rooms)
                            {
                                <option value="@room.Id">@room.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <button @onclick="AddProblem" type="button" disabled="@(Description.Length < 1)" class="btn btn-primary">Report problem</button>
        </form>
    </div>
</main>

@code {
    List<LocationModel> Locations { get; set; } = new();
    List<RoomModel> Rooms { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        Locations = (await LocationService.GetAllLocations()).ToList();
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
            UserId = await _sessionStorage.GetItemAsync<string>("userId");
        
        Email = user.FindFirst(c => c.Type == "email").Value;
    }
    
    private async Task SingleUpload(InputFileChangeEventArgs e)
    {
        var imageFile = await e.File.RequestImageFileAsync("", 1366, 768);
        await using var fileStream = imageFile.OpenReadStream();
        await using MemoryStream ms = new();
        
        await fileStream.CopyToAsync(ms);
        
        Picture = ms.ToArray();
    }
    
    private async Task GetRoomsAtLocation()
    {
        Rooms.Clear();
        var floors = (await FloorService.GetAllFloorsAndRoomsByLocationId(21)).ToList();
        foreach (var floor in floors)
            Rooms.AddRange(floor.Rooms);
    }

    private int RoomId { get; set; }
    private string UserId { get; set; }
    private string Email { get; set; }
    private string Title { get; set; } = string.Empty;
    private string Description { get; set; } = string.Empty;
    private byte[] Picture { get; set; }

    private async Task AddProblem()
    {
        await ProblemService.AddProblem(new ProblemModel(RoomId, UserId, Email, Title, Description, Picture));
    }
}
