@inject ISessionStorageService _sessionStorage;
@inject AuthenticationStateProvider _authStateProvider

@page "/report-problem"
@using MeetNSeat.Client.Services
@using MeetNSeat.Client.Models
@using Blazored.SessionStorage
@using System.Security.Claims
@attribute [Authorize]

<main role="main" class="col-md-12 ml-sm-auto col-lg-12 px-4">
    <h2 class="pt-3 pb-2 mb-3 border-bottom">Report problem</h2>
    <div>
        <form>
            <div class="mb-3">
                <label class="form-label h4">Problem</label>
                <textarea class="form-control" rows="8" placeholder="Enter your problem here ..." role="textbox" @bind="Description" @bind:event="oninput" maxlength="1000"></textarea>
                <span style="position: absolute; right: 36px; margin-top: -24px">@Description.Length / 1000</span>
            </div>
            <div class="mb-3">
                <label class="form-label m-1 pt-2">Location</label>
                <select class="form-control" @bind="Location" aria-label="Default select example">
                    <option placeholder="Select a location here">Select a location</option>
                    @if (Locations.Any())
                    {
                        @foreach (var location in Locations)
                        {
                            <option value="@location.Id">@location.Name, @location.City</option>
                        }
                    }
                </select>
                <label class="form-label">Room</label>
                <select class="form-control" @bind="RoomId" @bind:event="oninput" aria-label="Default select example">
                    <option placeholder="Select a location here">Select a room</option>
                    @if (Rooms.Any())
                    {
                        @foreach (var room in Rooms)
                        {
                            <option value="@room.Id">@room.Name</option>
                        }
                    }
                    <option value="1">Kamer 1</option>
                    <option value="2">Kamer 2</option>
                    <option value="3">Kamer 3</option>
                </select>
            </div>
            <button @onclick="AddProblem" type="button" disabled="@IsDisabled" class="btn btn-primary">Report problem</button>
        </form>
    </div>
</main>

@{ IsDisabled = Description.Length <= 0; }

@code {
    private string Location { get; set; }
    private bool IsDisabled { get; set; } = true;
    
    List<LocationModel> Locations { get; set; }  = new();
    List<RoomModel> Rooms { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        Locations = (await LocationService.GetAllLocations()).ToList();
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
            UserId = await _sessionStorage.GetItemAsync<string>("userId");
        
        Email = user.FindFirst(c => c.Type == "email").Value;
        // Rooms = (await RoomService.GetAllRoomTypes()).ToList();
    }

    private int RoomId { get; set; }
    private string UserId { get; set; }
    private string Email { get; set; }
    private string Description { get; set; } = string.Empty;
    private byte[] Picture { get; set; }

    private async Task AddProblem()
    {
        
        await ProblemService.AddProblem(new ProblemModel(RoomId, UserId, Email, Description, Picture));
    }
}
