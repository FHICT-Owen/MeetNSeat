@page "/problem-panel"
@using MeetNSeat.Client.Models
@using MeetNSeat.Client.Services
@attribute [Authorize]

<main role="main" class="col-md-12 ml-sm-auto col-lg-12 px-4">
    <h2 class="pt-3">Problem panel</h2>
    <div>
        <table class="table">
            <thead>
            <tr>
                <th scope="col">Title</th>
                <th scope="col">Room</th>
                <th scope="col">Reported by</th>
                <th scope="col">Reported on</th>
                <th scope="col"><button @onclick="ToggleResolvedProblemView" disabled="@IsDisabled" class="btn btn-primary p-1">@ButtonText</button></th>
            </tr>
            </thead>
            <tbody>
            @if (Problems.Any()){
                @foreach (var problem in Problems){
                    @if (!problem.IsResolved){
                        <tr>
                            <td>
                                <button class="btn btn-primary" @onclick="() => Toggle(problem)">Details</button>
                            </td>
                            <td>@problem.RoomId</td>
                            <td>@problem.UserId</td>
                            <td>@problem.ReportedOn</td>
                            <td>
                                <button @onclick="() => ResolveProblem(problem)" class="btn btn-primary">Resolve</button>
                            </td>
                        </tr>
                    }
                    @if (ShowResolved && problem.IsResolved){
                        <tr>
                            <td>
                                <button class="btn btn-primary" @onclick="() => Toggle(problem)">Details</button>
                            </td>
                            <td>@problem.RoomId</td>
                            <td>@problem.UserId</td>
                            <td>@problem.ReportedOn</td>
                            <td>
                                <button @onclick="() => ResolveProblem(problem)" class="btn btn-primary">Re-Open</button>
                                <button @onclick="() => DeleteProblem(problem.Id)" class="btn btn-primary">Delete</button>
                            </td>
                        </tr>
                    }
                    @if (!problem.IsCollapsed){
                        <tr>
                            <td colspan="5" style="background: #f2f2f2">
                                <div class="grid">
                                    <div>
                                        @problem.Description
                                    </div>
                                    @if (problem.Picture != null)
                                    {
                                        var base64 = Convert.ToBase64String(problem.Picture);
                                        var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
                                        <img alt src="@imgSrc" style="justify-self: end; max-width: 600px; max-height: 600px "/>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                }
            }
            </tbody>
        </table>
    </div>
</main>

@code {

    private bool ShowResolved { get; set; }

    private string ButtonText { get; set; } = "Show Resolved";

    private bool IsDisabled { get; set; } = true;
    
    List<ProblemModel> Problems { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        Problems = (await ProblemService.GetAllProblems()).ToList();
        IsDisabled = !Problems.Any(model => model.IsResolved);
    }
    
    private static void Toggle(ProblemModel problem)
    {
        problem.IsCollapsed = !problem.IsCollapsed;
    }

    private void ToggleResolvedProblemView()
    {
        ShowResolved = !ShowResolved;
        ButtonText = ShowResolved ? "Hide Resolved" : "Show Resolved";
    }
    
    private async Task ResolveProblem(ProblemModel problem)
    {
        problem.IsResolved = !problem.IsResolved;
        if (problem.IsResolved)
        {
            problem.ResolvedAt = DateTime.Now;
            await ProblemService.UpdateProblem(problem);
        }
        else
        {
            problem.ResolvedAt = null;
            await ProblemService.UpdateProblem(problem);
        }
        
        IsDisabled = !Problems.Any(model => model.IsResolved);
    }
    
    private async Task DeleteProblem(int id)
    {
        Problems.Remove(Problems.Find(problem => problem.Id == id));
        await ProblemService.DeleteProblem(id);
        IsDisabled = !Problems.Any(model => model.IsResolved);
    }
}

<style>
    .grid {
        display: grid;
        grid-template-columns: auto auto;
    }
</style>