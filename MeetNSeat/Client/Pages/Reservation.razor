@page "/reservation"
@attribute [Authorize(Roles = "1,2,3")]
@using MeetNSeat.Client.Models
@using MeetNSeat.Client.Services
@using Blazored.SessionStorage

@inject ISessionStorageService _sessionStorage;
@inject ISnackbar _snackbar

<main role="main" class="col-md-12 ml-sm-auto col-lg-12 px-4">
    <h2 class="pt-3 pb-2 mb-3 border-bottom">Plan a reservation</h2>
    <div>
        <form>
            <div class="mb-3">
                
                <label class="form-label m-1 pt-2">Location</label>
                <select class="form-control" @onchange="OnLocationChange" aria-label="Default select example">
                    <option placeholder="Select a location here">Select a location</option>
                    @if (Locations.Any())
                    {
                        @foreach (var location in Locations)
                        {
                            <option value="@location.Id">@location.Name, @location.City</option>
                        }
                    }
                </select>

                <label class="form-label m-1 pt-2">Room type</label>
                <select class="form-control" @onchange="OnTypeChange" aria-label="Default select example">
                    <option disabled selected placeholder="Select a location here">Select a room type</option>
                    @if (Rooms.Any())
                    {
                        @foreach (var room in Rooms)
                        {
                            <option value="@room.Type">@room.Type</option>
                        }
                    }
                </select>

                <label class="form-label m-1 pt-2">Attendees</label>
                <input type="number" min="1" max="30" class="form-control" Value="@Attendees" @onchange="OnAttendeesChange" id="Attendees" placeholder="Attendees" disabled="@IsDisabled">

                <label class="form-label m-1 pt-2">Start</label>
                <br/>
                <MatDatePicker Value="StartDate.ToLocalTime()" ValueChanged="(DateTime i) => OnStartDateChange(i)" Outlined="true" AllowInput="false" EnableTime="true" Enable24hours="true" Format="MM/dd/yy HH:mm"></MatDatePicker>
                <br/>
                
                <label class="form-label m-1 pt-2">End</label>
                <br/>
                <MatDatePicker Value="EndDate.ToLocalTime()" ValueChanged="(DateTime i) => OnEndDateChange(i)" Outlined="true" AllowInput="false" EnableTime="true" Enable24hours="true" Format="MM/dd/yy HH:mm"></MatDatePicker>
                <br/>
                
                <label class="form-label m-1 pt-2">Available rooms</label>
                <select class="form-control" @bind="AvailableRoom" @bind:event="oninput" aria-label="Default select example" id="AvailableRooms">
                    <option value="" selected>Select a Room</option>
                    @if (AvailableRooms.Any())
                    {
                        @foreach (var availableRoom in AvailableRooms)
                        {
                            <option value="@availableRoom.Id">@availableRoom.Name</option>
                        }
                    }
                </select>
                <br/>
            </div>
            <button @onclick="AddReservation" type="button" disabled="@(string.IsNullOrEmpty(AvailableRoom) || string.IsNullOrEmpty(Location) || string.IsNullOrEmpty(Type) || string.IsNullOrEmpty(Attendees) || StartDate.Equals(null) || EndDate.Equals(null))" class="btn btn-primary">Plan reservation</button>
        </form>
    </div>
</main>

@code {
    private string Location { get; set; }


    private int RoomId { get; set; }
    private string Type { get; set; }
    private string AvailableRoom { get; set; }
    private string Attendees { get; set; }
    private bool IsDisabled { get; set; }

    private DateTime StartDate { get; set; } = DateTime.Now;
    private DateTime EndDate { get; set; } = DateTime.Now.AddHours(1);

    List<LocationModel> Locations { get; set; } = new();
    List<RoomModel> Rooms { get; set; } = new();
    List<RoomModel> AvailableRooms { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        IsDisabled = false;
        Locations = (await LocationService.GetAllLocations()).ToList();
        Rooms = (await RoomService.GetAllRoomTypes()).ToList();
    }

    async Task OnLocationChange(ChangeEventArgs e)
    {
        Location = (string) e.Value;
        await GetAvailableRooms();
    }

    async Task OnTypeChange(ChangeEventArgs e)
    {
        Type = (string) e.Value;
        if (Type == "Workspace")
        {
            Attendees = "1";
            Console.WriteLine(Attendees);
            IsDisabled = true;
            StateHasChanged();

        }
        else if (Type == "Conference")
        {
            Attendees = "1";
            IsDisabled = false;
        }
        StateHasChanged();

        await GetAvailableRooms();
    }

    async Task OnAttendeesChange(ChangeEventArgs e)
    {
        Attendees = (string) e.Value;
        Console.WriteLine(Attendees);
        await GetAvailableRooms();
    }

    async Task OnStartDateChange(DateTime value)
    {
        StartDate = value;
        await GetAvailableRooms();
    }

    async Task OnEndDateChange(DateTime value)
    {
        EndDate = value;
        await GetAvailableRooms();
    }

    private async Task AddReservation()
    {
        try
        {
            if ((EndDate - StartDate).Hours > 8)
            {
                _snackbar.Add("Reservation is longer than 8 hours!", Severity.Error);
                return;
            }
            var locationId = Convert.ToInt32(Location);
            var attendees = Convert.ToInt32(Attendees);
            var roomId = Convert.ToInt32(AvailableRoom);
            var userId = await _sessionStorage.GetItemAsync<string>("userId");
            var success = await UserService.CreateReservation(new ReservationModel(locationId, roomId, Type, userId, attendees, StartDate, EndDate));
            if (success)
            {
                _snackbar.Add("Successfully added reservation", Severity.Success);
            }
            AvailableRooms.Clear();
            AvailableRoom = null;
            await GetAvailableRooms();
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Failed to add reservation! > {ex.Message}", Severity.Error);
        }
    }

    private async Task GetAvailableRooms()
    {
        var locationId = Convert.ToInt32(Location);
        var attendees = Convert.ToInt32(Attendees);
        try
        {
            if (locationId != 0 && Type != null && attendees != 0 && StartDate != DateTime.MinValue && EndDate != DateTime.MinValue && attendees > 0)
                AvailableRooms = (await RoomService.GetAllAvailableRooms(locationId, Type, attendees, StartDate, EndDate, RoomId)).ToList();
        }
        catch (Exception)
        {
            _snackbar.Add("Unable to retrieve rooms!", Severity.Error);
        }
    }
}
