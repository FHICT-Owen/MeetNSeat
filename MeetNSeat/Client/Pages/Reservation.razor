@page "/reservation"
@attribute [Authorize]
@using MeetNSeat.Client.Models
@using MeetNSeat.Client.Services
@using Blazored.SessionStorage

@inject ISessionStorageService _sessionStorage;
@inject ISnackbar _snackbar

<main role="main" class="col-md-12 ml-sm-auto col-lg-12 px-4">
    <h2 class="pt-3 pb-2 mb-3 border-bottom">Plan a reservation</h2>
    <div>
        <form>
            <div class="mb-3">
                
                <label class="form-label m-1 pt-2">Location</label>
                <select class="form-control" @onchange="OnLocationChange" aria-label="Default select example">
                    <option placeholder="Select a location here">Select a location</option>
                    @if (Locations.Any())
                    {
                        @foreach (var location in Locations)
                        {
                            <option value="@location.Id">@location.Name, @location.City</option>
                        }
                    }
                </select>

                <label class="form-label m-1 pt-2">Room type</label>
                <select class="form-control" @onchange="OnTypeChange" aria-label="Default select example">
                    <option disabled selected placeholder="Select a location here">Select a room type</option>
                    @if (Rooms.Any())
                    {
                        @foreach (var room in Rooms)
                        {
                            <option value="@room.Type">@room.Type</option>
                        }
                    }
                </select>

                <label class="form-label m-1 pt-2">Attendees</label>
                <input type="number" class="form-control" @onchange="OnAttendeesChange" id="Attendees" placeholder="Attendees">

                <label class="form-label m-1 pt-2">Start</label>
                <br/>
                <MatDatePicker @bind-Value="StartDate" Outlined="true" AllowInput="false" EnableTime="true" Enable24hours="true" Format="MM/dd/yy HH:mm"></MatDatePicker>
                <br/>
                
                <label class="form-label m-1 pt-2">End</label>
                <br/>
                <MatDatePicker @bind-Value="EndDate" Outlined="true" AllowInput="false" EnableTime="true" Enable24hours="true" Format="MM/dd/yy HH:mm"></MatDatePicker>
                <br/>
                
                <label class="form-label m-1 pt-2">Available rooms</label>
                <select class="form-control" @bind="AvailableRoom" aria-label="Default select example" id="AvailableRooms">
                    <option>Select a Room</option>
                    @if (AvailableRooms.Any())
                    {
                        @foreach (var availableRoom in AvailableRooms)
                        {
                            <option value="@availableRoom.Id">@availableRoom.Name </option>
                        }
                    }
                </select>
                <br/>
                <button @onclick="GetAvailableRooms" type="button" disabled="@IsGetDisabled" class="btn btn-primary">Get available room</button>
            </div>
            <button @onclick="AddReservation" type="button" disabled="@IsAddDisabled" class="btn btn-primary">Plan reservation</button>
        </form>
    </div>
</main>

@if (!string.IsNullOrEmpty(Location) && !string.IsNullOrEmpty(Type) && !string.IsNullOrEmpty(Attendees))
{
    IsGetDisabled = false;
}
else
{
    IsGetDisabled = true;
}

@{ IsAddDisabled = string.IsNullOrEmpty(AvailableRoom); }

@code {
    private string Location { get; set; }


    private string Type { get; set; }
    private string AvailableRoom { get; set; }
    private string Attendees { get; set; }
    private int Room { get; set; }
    private bool IsGetDisabled { get; set; } = true;
    private bool IsAddDisabled { get; set; } = true;

    private DateTime StartDate { get; set; } = DateTime.Today;
    private DateTime EndDate { get; set; } = DateTime.Today.AddHours(1);

    List<LocationModel> Locations { get; set; } = new();
    List<RoomModel> Rooms { get; set; } = new();
    List<RoomModel> AvailableRooms { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Locations = (await LocationService.GetAllLocations()).ToList();
        Rooms = (await RoomService.GetAllRoomTypes()).ToList();
    }
    
    async Task OnLocationChange(ChangeEventArgs e)
    {
        Console.WriteLine("Location");
        Location = (string) e.Value;
        await GetAvailableRooms();
    }
    
    async Task OnTypeChange(ChangeEventArgs e)
    {
        Console.WriteLine("Type");
        Type = (string) e.Value;
        await GetAvailableRooms();
    }
    
    async Task OnAttendeesChange(ChangeEventArgs e)
    {
        Console.WriteLine("Attendees");
        Attendees = (string) e.Value;
        await GetAvailableRooms();
    }

    async Task OnStartDateChange(ChangeEventArgs e)
    {
        Console.WriteLine("Start");
        StartDate = (DateTime) e.Value;
        await GetAvailableRooms();
    }
    
    async Task OnEndDateChange(ChangeEventArgs e)
    {
        Console.WriteLine("End");
        EndDate = (DateTime) e.Value;
        await GetAvailableRooms();
    }

    private async Task AddReservation()
    {
        // Location, Room type, attendees, Starttime, endtime,userid
        var locationId = Convert.ToInt32(Location);
        var attendees = Convert.ToInt32(Attendees);
        var roomId = Convert.ToInt32(AvailableRoom);
        Console.WriteLine(Location);
        var userId = await _sessionStorage.GetItemAsync<string>("userId");
        var success = await UserService.CreateReservation(new ReservationModel(locationId, roomId, Type, userId, attendees, StartDate, EndDate));
        if (success)
        {
            _snackbar.Add("Successfully added reservation", Severity.Success);
        }
        else
        {
            _snackbar.Add("Failed to add reservation!", Severity.Error);
        }
    }

    private async Task GetAvailableRooms()
    {
        var locationId = Convert.ToInt32(Location);
        var attendees = Convert.ToInt32(Attendees);
        try
        {
            AvailableRooms = (await RoomService.GetAllAvailableRooms(locationId, Type, attendees, StartDate, EndDate)).ToList();
        }
        catch (Exception e)
        {
            _snackbar.Add("Unable to retrieve rooms!", Severity.Error);
        }
    }
}
