@inject ISessionStorageService _sessionStorage;

@page "/feedback/new/"
@using MeetNSeat.Client.Services
@using MeetNSeat.Client.Models
@using Blazored.SessionStorage
@attribute [Authorize]

<main role="main" class="col-md-12 ml-sm-auto col-lg-12 px-4">
    <h2 class="pt-3 pb-2 mb-3 border-bottom">Add new feeback</h2>
    <div>
        <p>@Msg</p>
        <form>
            <div class="form-group">
                <label for="selecteduser">Select a user</label>
                <select class="form-control" @bind="UserId" @bind:event="oninput" id="selecteduser">
                    <option>Select a user...</option>
                    @if (Users.Any())
                    {
                        @foreach (var u in Users)
                        {
                            <option value="@u.Id">@u.Nickname</option>
                        }
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="feedback">Feedback</label>
                <input type="text" @bind="Description" @bind:event="oninput" class="form-control" id="feedback" placeholder="Feedback">
            </div>
            <div class="form-group">
                <label for="feedbackstate">Give me a smiley</label>
                <select class="form-control" @bind="FeedbackState" @bind:event="oninput" id="feedbackstate">
                    <option>Select a smiley...</option>
                    <option value="1">&#128577;</option>
                    <option value="2">&#128528;</option>
                    <option value="3">&#128578;</option>
                </select>
            </div>

            <button @onclick="AddNewFeedback" type="button" class="btn btn-primary">Submit your feedback</button>
        </form>
    </div>
</main>

@code {
    public List<UserModel> Users { get; set; } = new List<UserModel>();
    private static string UserId { get; set; } = null;
    private static string Description { get; set; } = null;
    private static int? FeedbackState { get; set; } = null;
    private static string Msg { get; set; }

    private async Task AddNewFeedback()
    {
        Msg = await FeedbackService.AddFeedback(new FeedbackModel(UserId, Description, FeedbackState));
    }

    protected override async Task OnInitializedAsync()
    {
        Users = (await UserService.GetAllUsers()).ToList();
        Msg = Msg;
    }
}