@inject ISnackbar _snackbar

@page "/feedback/new/"
@using MeetNSeat.Client.Services
@using MeetNSeat.Client.Models
@using Blazored.SessionStorage
@attribute [Authorize(Roles = "1,2,3")]

<main role="main" class="col-md-12 ml-sm-auto col-lg-12 px-4">
    <h2 class="pt-3 pb-2 mb-3 border-bottom">Add new feedback</h2>
    <div>
        <form>
            <div class="form-group">
                <label>Select a user</label>
                <select class="form-control" @bind="UserId" @bind:event="oninput" id="selecteduser">
                    <option>Select a user...</option>
                    @if (Users.Any())
                    {
                        @foreach (var u in Users)
                        {
                            <option value="@u.Id">@u.Nickname</option>
                        }
                    }
                </select>
            </div>
            <div class="form-group">
                <label>Feedback</label>
                <textarea class="form-control" style="min-height: 40px; white-space: pre-line" rows="8" placeholder="Enter your feedback here ..." role="textbox" @bind="Description" @bind:event="oninput" maxlength="1000"></textarea>
                <span style="position: absolute; right: 36px; margin-top: -24px">@Description.Length / 1000</span>
            </div>
            <div class="form-group">
                <label>Give me a smiley</label>
                <select class="form-control" @bind="FeedbackState" @bind:event="oninput" id="feedbackstate">
                    <option>Select a smiley...</option>
                    <option value="1">&#128577;</option>
                    <option value="2">&#128528;</option>
                    <option value="3">&#128578;</option>
                </select>
            </div>
            <button @onclick="AddNewFeedback" disabled="@(string.IsNullOrEmpty(Description) || string.IsNullOrEmpty(UserId) || string.IsNullOrEmpty(FeedbackState.ToString()))" type="button" class="btn btn-primary">Submit your feedback</button>
        </form>
    </div>
</main>

@code {
    private List<UserModel> Users { get; set; } = new ();
    private static string UserId { get; set; }
    private static string Description { get; set; } = string.Empty;
    private static int? FeedbackState { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Users = (await UserService.GetAllUsers()).ToList();
    }

    private async Task AddNewFeedback()
    {
        var success = await FeedbackService.AddFeedback(new FeedbackModel(UserId, Description, FeedbackState));
        if (success) _snackbar.Add("Feedback has been sent &#128578;!", Severity.Success);
        if (!success) _snackbar.Add("Something went wrong &#128577; !", Severity.Error);
    }
}