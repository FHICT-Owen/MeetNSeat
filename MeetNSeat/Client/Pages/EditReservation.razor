@*TODO: Get id*@
@page "/editreservation"
@attribute [Authorize]

@using MeetNSeat.Client.Services
@using MeetNSeat.Client.Models
@using Blazored.SessionStorage

@inject ISessionStorageService _sessionStorage
@inject ISnackbar _snackbar

@inject NavigationManager _nav

<main role="main" class="col-md-12 ml-sm-auto col-lg-12 px-4">
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2">Edit reservation</h1>
    </div>
    <div class="row">
        <div class="col-md-12">
            <form>
                <div class="form-group mx-sm-3 mb-3">
                    <label for="attendees">Attendees</label>
                    <input type="number" class="form-control" @bind-value="@_model.Attendees" id="Attendees" placeholder="Attendees">
                </div>

                <label class="form-label m-1 pt-2">Start</label>
                <br />
                <MatDatePicker Value="_model.StartTime" ValueChanged="(DateTime i) => OnStartDateChange(i)" Outlined="true" AllowInput="false" EnableTime="true" Enable24hours="true" Format="MM/dd/yy HH:mm"></MatDatePicker>
                <br />

                <label class="form-label m-1 pt-2">End</label>
                <br />
                <MatDatePicker Value="_model.EndTime" ValueChanged="(DateTime i) => OnEndDateChange(i)" Outlined="true" AllowInput="false" EnableTime="true" Enable24hours="true" Format="MM/dd/yy HH:mm"></MatDatePicker>
                <br />

                @*<div class="form-group mx-sm-3 mb-3">
                        <label for="starttime">Start Time</label>
                        <input type="datetime" class="form-control" id="starttime" @bind="@_model.StartTime">
                    </div>
                    <div class="form-group mx-sm-3 mb-3">
                        <label for="endtime">End Time</label>
                        <input type="datetime" class="form-control" id="endtime" @bind="@_model.EndTime">
                    </div>*@

                <button @onclick="EditReservations" type="button" disabled="@(_model.StartTime.Equals(null) || _model.EndTime.Equals(null))" class="btn btn-primary mb-2">Confirm Change</button>
            </form>
        </div>
    </div>
</main>

@code
{
    private string Attendees { get; set; }
    private DateTime StartDate { get; set; }
    private DateTime EndDate { get; set; }


    private ReservationModel _model = new();
    List<RoomModel> AvailableRooms { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _model = await _sessionStorage.GetItemAsync<ReservationModel>("reservation");
    }

    private void OnStartDateChange(DateTime value)
    {
        _model.StartTime = value;
    }

    private void OnEndDateChange(DateTime value)
    {
        _model.EndTime = value;
    }

    private async Task<List<RoomModel>> CheckDate()
    {
        AvailableRooms = (await RoomService.GetAllAvailableRooms(_model.LocationId, _model.Type, _model.Attendees, _model.StartTime, _model.EndTime, _model.RoomId)).ToList();

        if (AvailableRooms.Any())
        {
            return AvailableRooms;
        }
        else
        {
            _snackbar.Add("Reservation is not possible!", Severity.Error);
            return AvailableRooms;
        }
    }

    private async Task EditReservations()
    {
        //Check date.
        List<RoomModel> availableRoom = await CheckDate();
        var matchingvalues = availableRoom
            .Where(r =>r.Id == _model.RoomId);
        if (matchingvalues.Count() > 0)
        {
            if ((_model.EndTime - _model.StartTime).Hours > 8)
            {
                _snackbar.Add("Reservation is longer than 8 hours!", Severity.Error);
                return;
            }

            await UserService.EditReservation(_model);
            await _sessionStorage.RemoveItemAsync("reservation");
            _nav.NavigateTo("dashboard");
        }
        else
        {
            _snackbar.Add("Unavailable date has been given!", Severity.Error);
        }
    }
}