@page "/dashboard"
@inject ISessionStorageService _sessionStorage;
@using MeetNSeat.Client.Services
@using MeetNSeat.Client.Models
@using Blazored.SessionStorage
@attribute [Authorize]

<main role="main" class="col-md-12 ml-sm-auto
             col-lg-12 px-4">
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2">Dashboard</h1>
    </div>
    <div class="row">
        <div class="col-md-6">
            <h1 class="h3">Reserveringen</h1>
            <p>@Msg</p>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col">Tijd</th>
                        <th scope="col">Locatie</th>
                        <th scope="col">Kamer</th>
                        <th scope="col">Soort</th>
                        <th scope="col">Gebruiker</th>
                        <th scope="col">Feedbackid</th>
                        <th scope="col">Rol</th>
                        <th scope="col">Gemaakt op</th>
                        <th scope="col">Starttijd</th>
                        <th scope="col">Eindtijd</th>
                    </tr>
                </thead>
                <tbody>
                    @if (UserReservations.Count > 0)
                    {
                        foreach (var reservation in UserReservations)
                        {
                            <tr>
                                @* <td>@user.CreatedOn</td> *@
                                @* <td>@user.RoomId</td> *@
                                @* <td>@user.RoomId</td> *@
                                @* <td>@user.RoomId</td> *@
                                @* <td>@user.ReservationId</td> *@
                                @* <td>@user.FeedbackId</td> *@
                                @* <td>@user.UserId</td> *@
                                @* <td>@user.CreatedOn</td> *@
                                @* <td>@user.StartTime</td> *@
                                @* <td>@user.EndTime</td> *@
                                <td>
                                    <form>
                                        <button @onclick="() => ConfirmReservation(reservation)" type="button" class="btn btn-danger">Bevestigen</button>
                                        <button @onclick="() => DeleteReservation(reservation)" type="button" class="btn btn-danger">Vrij geven</button>
                                    </form>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        &nbsp;
        <div class="col-md-6">
            <h1 class="h3">Schandpaal</h1>
            <table class="table table-striped red">
                <thead>
                    <tr>
                        <th scope="col">Tijd</th>
                        <th scope="col">Locatie</th>
                        <th scope="col">Kamer</th>
                        <th scope="col">Presentie</th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="color:red">
                        <td>13:00 - 14:00</td>
                        <td>Eindhoven</td>
                        <td>2.20</td>
                        <td>Afwezig</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

</main>

@code{

    private static string Msg { get; set; }
    private IpAddress IpAddress { get; set; }

    List<ReservationModel> UserReservations { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        var userId = await _sessionStorage.GetItemAsync<string>("userId");
        var reservations = (await UserService.GetAllReservations()).ToList();
        UserReservations = reservations.FindAll(res => res.UserId == userId);
        Msg = Msg;
    }

    private async Task ConfirmReservation(ReservationModel reservation)
    {
        await UserService.ConfirmReservation(reservation.Id, IpAddress);
    }

    private static async Task DeleteReservation(ReservationModel reservation)
    {
        Msg = await ReservationService.DeleteReservation(reservation.Id);
    }
}