@page "/dashboard"

@using MeetNSeat.Client.Services
@using MeetNSeat.Client.Models
@using Blazored.SessionStorage

@inject IApiClientService ApiClientService;
@inject ISessionStorageService _sessionStorage

@attribute [Authorize]

<main role="main" class="col-md-12 ml-sm-auto
             col-lg-12 px-4">
    @*<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">*@
    <h1 class="h2">Dashboard</h1>
    @*</div>*@
    <div class="row">
        <div class="col-md-6">
            <p>@Msg</p>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col">Time</th>
                        <th scope="col">Location</th>
                        <th scope="col">Room</th>
                        <th scope="col">Type</th>
                        <th scope="col">Attendees</th>
                        <th scope="col">CreatedOn</th>
                        <th scope="col">Confirmed</th>
                    </tr>
                </thead>
                <tbody>
                    @if (UserReservations.Count > 0)
                    {
                        foreach (var reservation in UserReservations)
                        {
                            <tr>
                                <td>@reservation.StartTime - @reservation.EndTime</td>
                                <td>@GetLocation(reservation.RoomId).City</td>
                                <td>@GetRoom(reservation.RoomId)</td>
                                <td>@GetRoom(reservation.RoomId).Type</td>
                                <td>@reservation.Attendees</td>
                                <td>@reservation.CreatedOn</td>
                                <td>@reservation.IsConfirmed</td>
                                <td>
                                    <form>
                                        <button @onclick="() => ConfirmReservation(reservation)" type="button" class="btn btn-danger">Confirm</button>

                                        <button @onclick="() => DeleteReservation(reservation)" type="button" class="btn btn-danger">Cancel</button>
                                    </form>
                                </td>
                            </tr>
                        }
                    }
                }
                </tbody>
            </table>
        </div>
        @* TODO: GetMyFeedback*@
        @*&nbsp;
        <div class="col-md-6">
            <h1 class="h3">Schandpaal</h1>
            <table class="table table-striped red">
                <thead>
                    <tr>
                        <th scope="col">Tijd</th>
                        <th scope="col">Locatie</th>
                        <th scope="col">Kamer</th>
                        <th scope="col">Presentie</th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="color:red">
                        <td>13:00 - 14:00</td>
                        <td>Eindhoven</td>
                        <td>2.20</td>
                        <td>Afwezig</td>
                    </tr>
                </tbody>
            </table>
        </div>*@
    </div>

</main>

@code{
    private static string Msg { get; set; }
    private List<LocationModel> Locations { get; set; }
    private List<FloorModel> Floors { get; set; }
    private List<RoomModel> Rooms { get; set; }
    private string userId { get; set; }
    List<ReservationModel> UserReservations { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        userId = await _sessionStorage.GetItemAsync<string>("userId");
        var reservations = (await UserService.GetAllReservations(userId)).ToList();
        System.Console.WriteLine(reservations);
        Locations = (await LocationService.GetAllLocations()).ToList();
        Floors = (await FloorService.GetAllFloors()).ToList();
        Rooms = (await RoomService.GetAllRooms()).ToList();
        UserReservations = reservations.FindAll(res => res.UserId == userId);

        Msg = Msg;
    }

    private RoomModel GetRoom(int roomId)
    {
        return Rooms.SingleOrDefault(res => res.Id == roomId);
    }

    private LocationModel GetLocation(int roomId)
    {
        var room = GetRoom(roomId);
        var floor = Floors.SingleOrDefault(res => res.Id == room.FloorId);
        return Locations.SingleOrDefault(res => res.Id == floor?.LocationId);
    }

    private async Task ConfirmReservation(ReservationModel reservation)
    {
        var ip = await ApiClientService.GetUserIPAsync();
        await UserService.ConfirmReservation(reservation.Id, ip.Ip);
    }

    private static async Task DeleteReservation(ReservationModel reservation)
    {
        Msg = await ReservationService.DeleteReservation(reservation.Id);
    }
}