@page "/dashboard"

@using MeetNSeat.Client.Services
@using MeetNSeat.Client.Models
@using Blazored.SessionStorage
@using System.Globalization

@inject IApiClientService _apiClientService
@inject ISessionStorageService _sessionStorage
@inject NavigationManager _nav
@inject AuthenticationStateProvider _authStateProvider


@attribute [Authorize(Roles = "1,2,3")]

<main role="main" class="col-md-12 ml-sm-auto col-lg-12 px-4">
    <h2 class="pt-3">Dashboard</h2>
    <div>
        <p>@Msg</p>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">Start time</th>
                    <th scope="col">End time</th>
                    <th scope="col">Location</th>
                    <th scope="col">Room</th>
                    <th scope="col">Type</th>
                    <th scope="col">Attendees</th>
                    <th scope="col">Confirmed</th>
                    <th scope="col"></th> @* this needs to be here *@
                </tr>
            </thead>
            <tbody>
                @if (UserReservations.Any())
                {
                    foreach (var reservation in UserReservations)
                    {
                        <tr>
                            <td>@reservation.StartTime</td>
                            <td>@reservation.EndTime</td>
                            <td>@GetLocation(reservation.RoomId).City</td>
                            <td>@GetRoom(reservation.RoomId).Name</td>
                            <td>@GetRoom(reservation.RoomId).Type</td>
                            <td>@reservation.Attendees</td>
                            <td style="min-width: 100px">
                                @if (reservation.IsConfirmed.HasValue)
                                {
                                    <span class="oi oi-check mx-2 p-4" aria-hidden="true"></span>
                                }
                                else
                                {
                                    if (reservation.StartTime.Date == DateTime.Today)
                                    {
                                        <button @onclick="() => ConfirmReservation(reservation)" style="margin: 5px" type="button" class="btn btn-primary">Confirm</button>
                                    }
                                    <button @onclick="() => EditReservation(reservation, GetRoom(reservation.RoomId), GetLocation(reservation.RoomId).Id)" style="margin: 5px" type="button" class="btn btn-danger">Edit</button>
                                    <button @onclick="() => DeleteReservation(reservation)" style="margin: 5px" type="button" class="btn btn-danger">Cancel</button>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
    <h2 class="pt-3 pb-2 mb-3">User feedback</h2>
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Description</th>
                <th scope="col">FeedbackState</th>
            </tr>
        </thead>
        <tbody>
            @if (Feedback.Any())
            {
                foreach (var feedback in Feedback)
                {
                    <tr class="color:red">
                        <td style="white-space: pre-line">@feedback.Description</td>
                        <td>
                            @if (feedback.FeedbackState == 1)
                            {
                                <h3>&#128577;</h3>
                            }
                            @if (feedback.FeedbackState == 2)
                            {
                                <h3>&#128528;</h3>
                            }
                            @if (feedback.FeedbackState == 3)
                            {
                                <h3>&#128578;</h3>
                            }
                        </td>
                    </tr>
}
            }
        </tbody>
    </table>
</main>

@code{
    private static string Msg { get; set; }
    private List<LocationModel> Locations { get; set; }
    private List<FloorModel> Floors { get; set; }
    private List<RoomModel> Rooms { get; set; }
    private string UserId { get; set; }
    List<FeedbackModel> Feedback { get; set; } = new();

    private List<ReservationModel> UserReservations { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            UserId = $"{user.FindFirst(res => res.Type == "sub")?.Value.Split("|")[1]}";
        }
        UserReservations = (await UserService.GetUserReservations(UserId)).ToList();
        Locations = (await LocationService.GetAllLocations()).ToList();
        Floors = (await FloorService.GetAllFloors()).ToList();
        Rooms = (await RoomService.GetAllRooms()).ToList();
        UserId = await _sessionStorage.GetItemAsync<string>("userId");
        Feedback = (await FeedbackService.GetAllFeedbackByUserId(UserId)).ToList();

        Msg = Msg;
    }

    private RoomModel GetRoom(int roomId)
    {
        return Rooms.SingleOrDefault(res => res.Id == roomId);
    }

    private LocationModel GetLocation(int roomId)
    {
        var room = GetRoom(roomId);
        var floor = Floors.SingleOrDefault(res => res.Id == room.FloorId);
        return Locations.SingleOrDefault(res => res.Id == floor?.LocationId);
    }

    private async Task ConfirmReservation(ReservationModel reservation)
    {
        var ip = await _apiClientService.GetUserIpAsync();
        reservation.IsConfirmed = DateTime.UtcNow;
        await UserService.ConfirmReservation(ip.Ip, reservation);
    }

    private async Task EditReservation(ReservationModel reservation, RoomModel roomModel, int locationId)
    {
        reservation.LocationId = locationId;
        reservation.Type = roomModel.Type;

        await _sessionStorage.SetItemAsync("reservation", reservation);
        // ReSharper disable once StringLiteralTypo
        _nav.NavigateTo("editreservation");
    }

    private async Task DeleteReservation(ReservationModel reservation)
    {
        UserReservations.Remove(UserReservations.Find(res => res.Id == reservation.Id));
        Msg = await ReservationService.DeleteReservation(reservation.Id);

    }
}